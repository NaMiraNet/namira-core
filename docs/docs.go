// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {
            "name": "API Support",
            "email": "namairanet@proton.me"
        },
        "license": {
            "name": "AGPL-3.0",
            "url": "https://opensource.org/license/agpl-v3"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/health": {
            "get": {
                "description": "Returns the current health status of the service",
                "tags": [
                    "health"
                ],
                "summary": "Health Check",
                "operationId": "getHealth",
                "responses": {
                    "200": {
                        "description": "Service is healthy",
                        "schema": {
                            "$ref": "#/definitions/models.HealthResponse"
                        }
                    },
                    "503": {
                        "description": "Service is unhealthy",
                        "schema": {
                            "type": "object",
                            "properties": {
                                "error": {
                                    "type": "string",
                                    "example": "Database connection failed"
                                },
                                "status": {
                                    "type": "string",
                                    "example": "unhealthy"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/job/{id}": {
            "get": {
                "description": "Retrieve the current status and results of a scanning job",
                "tags": [
                    "jobs"
                ],
                "summary": "Get Job Status",
                "operationId": "getJobStatus",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Unique identifier of the scanning job",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Job status retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/models.Job"
                        }
                    },
                    "404": {
                        "description": "Job not found",
                        "schema": {
                            "$ref": "#/definitions/models.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.MessageResponse"
                        }
                    }
                }
            }
        },
        "/scan": {
            "post": {
                "description": "Initiates a background job to scan and validate proxy configurations.\n\nSupports three input formats:\n1. **JSON format**: Submit configs as a JSON array\n2. **Plain text format**: Submit configs as newline-separated text\n3. **File upload**: Upload a text file with configs (multipart/form-data)",
                "consumes": [
                    "application/json",
                    "text/plain",
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "scanning"
                ],
                "summary": "Start Asynchronous Proxy Scanning Job",
                "operationId": "startScan",
                "parameters": [
                    {
                        "description": "Proxy configurations in JSON format",
                        "name": "configs",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.ScanRequest"
                        }
                    },
                    {
                        "type": "file",
                        "description": "Text file containing proxy configurations (one per line)",
                        "name": "file",
                        "in": "formData"
                    }
                ],
                "responses": {
                    "202": {
                        "description": "Scan job successfully started",
                        "schema": {
                            "$ref": "#/definitions/models.ScanResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid input format or empty configs",
                        "schema": {
                            "$ref": "#/definitions/models.MessageResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/models.MessageResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "models.CheckResult": {
            "type": "object",
            "properties": {
                "delay": {
                    "description": "Response delay in milliseconds",
                    "type": "integer",
                    "example": 125
                },
                "index": {
                    "description": "Index of the configuration in the original list",
                    "type": "integer",
                    "example": 0
                },
                "status": {
                    "description": "Status of the configuration check",
                    "type": "string",
                    "example": "success"
                }
            }
        },
        "models.HealthResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "description": "Service health status",
                    "type": "string",
                    "example": "ok"
                },
                "version": {
                    "description": "API version",
                    "type": "string",
                    "example": "1.0.0"
                },
                "workerPool": {
                    "$ref": "#/definitions/models.WorkerPoolStatus"
                }
            }
        },
        "models.Job": {
            "type": "object",
            "properties": {
                "doneCount": {
                    "description": "Number of configurations processed",
                    "type": "integer",
                    "example": 8
                },
                "endTime": {
                    "description": "Job completion timestamp (null if not completed)",
                    "type": "string",
                    "example": "2024-01-15T10:32:15Z"
                },
                "error": {
                    "description": "Error message if job failed",
                    "type": "string"
                },
                "id": {
                    "description": "Unique job identifier",
                    "type": "string",
                    "example": "job_12345abcde"
                },
                "results": {
                    "description": "Map of configuration hash to check results",
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "#/definitions/models.CheckResult"
                    }
                },
                "startTime": {
                    "description": "Job start timestamp",
                    "type": "string",
                    "example": "2024-01-15T10:30:00Z"
                },
                "status": {
                    "description": "Current job status",
                    "type": "string",
                    "enum": [
                        "pending",
                        "running",
                        "completed",
                        "failed"
                    ],
                    "example": "running"
                },
                "totalCount": {
                    "description": "Total number of configurations to process",
                    "type": "integer",
                    "example": 10
                },
                "validCount": {
                    "description": "Number of valid configurations found",
                    "type": "integer",
                    "example": 6
                }
            }
        },
        "models.MessageResponse": {
            "type": "object",
            "required": [
                "message",
                "status"
            ],
            "properties": {
                "message": {
                    "description": "Error or status message",
                    "type": "string",
                    "example": "No configs provided"
                },
                "status": {
                    "description": "HTTP status code",
                    "type": "integer",
                    "example": 400
                }
            }
        },
        "models.ScanRequest": {
            "type": "object",
            "required": [
                "configs"
            ],
            "properties": {
                "configs": {
                    "description": "Array of proxy configuration URLs",
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "example": [
                        "vmess://eyJhZGQiOiIxMjcuMC4wLjEiLCJhaWQiOiIwIiwiaG9zdCI6IiIsImlkIjoiYWJjZGVmZ2giLCJuZXQiOiJ0Y3AiLCJwYXRoIjoiIiwicG9ydCI6IjEwODAiLCJwcyI6IlRlc3QgU2VydmVyIiwic2N5IjoiYXV0byIsInNuaSI6IiIsInRscyI6IiIsInR5cGUiOiJub25lIiwidiI6IjIifQ==",
                        "vless://12345678-1234-1234-1234-123456789abc@example.com:443?encryption=none&security=tls&type=ws&host=example.com&path=%2Fpath#Test%20VLESS"
                    ]
                }
            }
        },
        "models.ScanResponse": {
            "type": "object",
            "required": [
                "jobId"
            ],
            "properties": {
                "jobId": {
                    "description": "Unique identifier for the scanning job",
                    "type": "string",
                    "example": "job_12345abcde"
                }
            }
        },
        "models.WorkerPoolStatus": {
            "type": "object",
            "properties": {
                "completedTasks": {
                    "description": "Number of completed tasks",
                    "type": "integer",
                    "example": 1200
                },
                "failedTasks": {
                    "description": "Number of failed tasks",
                    "type": "integer",
                    "example": 50
                },
                "isRunning": {
                    "description": "Whether the worker pool is running",
                    "type": "boolean",
                    "example": true
                },
                "queueLength": {
                    "description": "Current queue length",
                    "type": "integer",
                    "example": 5
                },
                "totalTasks": {
                    "description": "Total number of tasks processed",
                    "type": "integer",
                    "example": 1250
                },
                "uptime": {
                    "description": "Worker pool uptime",
                    "type": "string",
                    "example": "2h30m15s"
                },
                "workerCount": {
                    "description": "Number of active workers",
                    "type": "integer",
                    "example": 10
                }
            }
        }
    },
    "tags": [
        {
            "description": "Health check operations",
            "name": "health"
        },
        {
            "description": "Proxy scanning operations",
            "name": "scanning"
        },
        {
            "description": "Job management operations",
            "name": "jobs"
        }
    ]
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{"http", "https"},
	Title:            "Namira Core API",
	Description:      "A RESTful API service for scanning and validating v2/xray proxy configurations.\n\n## Features\n- Asynchronous proxy scanning jobs\n- Support for multiple proxy protocols\n- Flexible input formats (JSON and plain text)\n- Job status monitoring\n\n## Supported Proxy Protocols\n- vmess://\n- vless://\n- trojan://\n- ss://",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
